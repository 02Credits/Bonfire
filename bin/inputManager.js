// Generated by CoffeeScript 1.12.0
(function() {
  define(["jquery", "underscore", "arbiter", "chatCommands", "emoticons"], function($, _, arbiter, processCommand, emoticons) {
    var clear, editDoc, exportObject, hiddenDiv, input, messageIdToEdit, messageIdToReact, reactDoc, sendMessage;
    exportObject = {};
    input = $('#input');
    hiddenDiv = $(document.createElement('div'));
    hiddenDiv.addClass('hiddendiv');
    $('body').append(hiddenDiv);
    exportObject.editing = false;
    exportObject.searching = false;
    exportObject.reacting = false;
    messageIdToEdit = "";
    messageIdToReact = "";
    sendMessage = function() {
      var commandRegex, i, len, line, lines, possibleMatch, results, text;
      text = input.text();
      input.text('');
      if (text !== "") {
        commandRegex = /^\\[^\s]+/;
        possibleMatch = text.match(commandRegex);
        if (possibleMatch != null) {
          return processCommand(possibleMatch[0], text.substring(possibleMatch[0].length));
        } else if (exportObject.editing) {
          arbiter.publish("messages/edit", {
            id: messageIdToEdit,
            text: text
          });
          input.removeClass("editing");
          return exportObject.editing = false;
        } else if (exportObject.reacting) {
          if (emoticons.emoticons[text] != null) {
            arbiter.publish("messages/react", {
              id: messageIdToReact,
              emoticon: text
            });
          } else {
            Materialize.toast(text + " isn't an emoticon");
          }
          input.removeClass("reacting");
          return exportObject.reacting = false;
        } else if (exportObject.searching) {
          return arbiter.publish("messages/search", text);
        } else {
          lines = [text];
          if (!text.startsWith("<")) {
            lines = text.split("\n");
          }
          results = [];
          for (i = 0, len = lines.length; i < len; i++) {
            line = lines[i];
            results.push(arbiter.publish("messages/send", {
              text: line,
              author: localStorage.displayName
            }));
          }
          return results;
        }
      } else {
        return clear();
      }
    };
    sendMessage = _.throttle(sendMessage, 1000, {
      trailing: false
    });
    editDoc = function(doc) {
      input.text(doc.text);
      exportObject.editing = true;
      exportObject.searching = false;
      exportObject.reacting = false;
      input.removeClass("searching");
      input.removeClass("reacting");
      messageIdToEdit = doc._id;
      input.addClass("editing");
      return input.focus();
    };
    reactDoc = function(doc) {
      input.text("");
      exportObject.reacting = true;
      exportObject.editing = false;
      exportObject.searching = false;
      input.removeClass("searching");
      input.removeClass("editing");
      messageIdToReact = doc._id;
      input.addClass("reacting");
      return input.focus();
    };
    clear = function(e) {
      if (e != null) {
        e.preventDefault();
      }
      exportObject.editing = false;
      exportObject.searching = false;
      exportObject.reacting = false;
      input.removeClass("editing");
      input.removeClass("searching");
      input.removeClass("reacting");
      $('.progress').fadeOut();
      input.text("");
      return arbiter.publish("messages/render");
    };
    $(document).keydown(function(e) {
      if (e.which === 13 && !e.shiftKey) {
        e.preventDefault();
        return sendMessage();
      } else if (e.which === 40) {
        clear(e);
        exportObject.searching = true;
        exportObject.editing = false;
        input.removeClass("editing");
        input.addClass("searching");
        $('.progress').fadeOut();
        return input.focus();
      } else if (e.which === 27) {
        return clear(e);
      } else if (e.which === 38) {
        return arbiter.publish("messages/getLast", editDoc);
      }
    });
    if (window.openDevTools != null) {
      $('#dev-tools').css("visibility", "visible").click(function() {
        return window.openDevTools();
      });
    }
    arbiter.subscribe("messages/startEdit", function(id) {
      return arbiter.publish("messages/get", {
        id: id,
        callback: function(doc) {
          if (doc.author === localStorage.displayName) {
            return editDoc(doc);
          }
        }
      });
    });
    arbiter.subscribe("messages/startReact", function(id) {
      return arbiter.publish("messages/get", {
        id: id,
        callback: function(doc) {
          if (doc.author !== localStorage.displayName) {
            return reactDoc(doc);
          }
        }
      });
    });
    return exportObject;
  });

}).call(this);
