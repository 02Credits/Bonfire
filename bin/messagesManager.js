// Generated by CoffeeScript 1.12.0
(function() {
  define(["jquery", "underscore", "pouchdbManager", "mithril", "moment", "pouchdb-collate", "messageRenderer", "inputManager", "arbiter", "scrollManager"], function($, _, PouchDB, m, moment, collate, messageRenderer, inputManager, arbiter, scrollManager) {
    var caughtUp, currentDB, editPrimed, handleChange, localDB, primeQueries, remoteChanges, remoteDB, render, renderMessages, searchPrimed;
    remoteDB = new PouchDB('http://73.193.51.132:5984/messages');
    localDB = new PouchDB('messages');
    currentDB = remoteDB;
    caughtUp = false;
    editPrimed = false;
    searchPrimed = false;
    handleChange = function(change) {
      render();
      if (change.doc.author !== localStorage.displayName) {
        if (typeof notifier !== "undefined" && notifier !== null) {
          return notifier.notify(true);
        }
      }
    };
    primeQueries = function() {
      if (caughtUp) {
        localDB.query("by_author", {
          key: localStorage.displayName,
          limit: 1,
          descending: true
        }).then(function() {
          if (!editPrimed) {
            editPrimed = true;
            return Materialize.toast("Edit Ready", 4000);
          }
        })["catch"](function(err) {
          return arbiter.publish("error", err);
        });
        return localDB.search({
          fields: ['text'],
          build: true
        }).then(function() {
          if (!searchPrimed) {
            searchPrimed = true;
            return Materialize.toast("Search Ready", 4000);
          }
        })["catch"](function(err) {
          return arbiter.publish("error", err);
        });
      }
    };
    render = function() {
      if (!inputManager.searching) {
        return currentDB.allDocs({
          include_docs: true,
          conflicts: false,
          attachments: true,
          binary: true,
          limit: scrollManager.messages,
          descending: true,
          startkey: "_design"
        }).then(function(results) {
          return renderMessages(results.rows.reverse());
        })["catch"](function(err) {
          return arbiter.publish("error", err);
        });
      }
    };
    renderMessages = function(messages, preventCombining) {
      var currentAuthor, currentMessage, groupedMessages, i, j, len, len1, message, messagePromises, renderedMessage;
      messages = _.filter(messages, function(message) {
        var doc;
        doc = message.doc;
        return doc.author != null;
      });
      groupedMessages = [];
      currentAuthor = {};
      currentMessage = null;
      for (i = 0, len = messages.length; i < len; i++) {
        message = messages[i];
        if ((message.doc.text == null) || message.doc.text.startsWith("<")) {
          if (currentMessage != null) {
            groupedMessages.push(currentMessage);
            currentMessage = null;
          }
          groupedMessages.push(message);
        } else {
          if (currentMessage != null) {
            if (currentMessage.doc.author === message.doc.author && moment.utc(message.doc.time).diff(moment.utc(currentMessage.doc.time), 'minutes') < 2 && !preventCombining) {
              if (message.doc.edited) {
                currentMessage.doc.edited = true;
              }
              currentMessage.doc.text.push({
                text: message.doc.text,
                id: message.doc._id
              });
            } else {
              groupedMessages.push(currentMessage);
              currentMessage = message;
              message.doc.text = [
                {
                  text: message.doc.text,
                  id: message.doc._id
                }
              ];
            }
          } else {
            currentMessage = message;
            message.doc.text = [
              {
                text: message.doc.text,
                id: message.doc._id
              }
            ];
          }
        }
      }
      if (currentMessage != null) {
        groupedMessages.push(currentMessage);
      }
      messagePromises = [];
      for (j = 0, len1 = groupedMessages.length; j < len1; j++) {
        message = groupedMessages[j];
        renderedMessage = messageRenderer.render(message.doc);
        if (renderedMessage != null) {
          messagePromises.push(renderedMessage);
        }
      }
      return (Promise.all(messagePromises)).then(function(renderedMessages) {
        m.render($('#messages').get(0), m("div", renderedMessages));
        $('.materialboxed').materialbox();
        return arbiter.publish("messages/rendered");
      });
    };
    render();
    remoteChanges = remoteDB.changes({
      since: 'now',
      live: true,
      include_docs: true
    }).on('change', handleChange).on('error', function(err) {
      return arbiter.publish("error", err);
    });
    localDB.sync(remoteDB).then(function() {
      $('.progress').fadeOut();
      caughtUp = true;
      primeQueries();
      localDB.sync(remoteDB, {
        live: true,
        retry: true
      }).on('error', function(err) {
        return arbiter.publish("error", err);
      });
      localDB.changes({
        since: 'now',
        live: true,
        include_docs: true
      }).on('change', handleChange).on('error', function(err) {
        return arbiter.publish("error", err);
      });
      remoteChanges.cancel();
      return currentDB = localDB;
    })["catch"](function(err) {
      return arbiter.publish("error", err);
    });
    $('#input').prop('disabled', false);
    arbiter.subscribe("messages/render", function(messages) {
      if (messages == null) {
        return render();
      } else {
        return renderMessages(messages);
      }
    });
    arbiter.subscribe("messages/edit", function(args) {
      var id, skipMarkEdit, text;
      id = args.id;
      text = args.text;
      skipMarkEdit = args.skipMarkEdit;
      $('.progress').fadeIn();
      return currentDB.get(id).then(function(doc) {
        $('.progress').fadeOut();
        doc.text = text;
        if (!skipMarkEdit) {
          doc.edited = true;
        }
        return currentDB.put(doc);
      })["catch"](function(err) {
        arbiter.publish("error", err);
        return $('.progress').fadeOut();
      });
    });
    arbiter.subscribe("messages/react", function(args) {
      var emoticon, id;
      id = args.id;
      emoticon = args.emoticon;
      return currentDB.get(id).then(function(doc) {
        var currentEmoticon, obj, ref, users;
        if (doc.reactions != null) {
          ref = doc.reactions;
          for (currentEmoticon in ref) {
            users = ref[currentEmoticon];
            doc.reactions[currentEmoticon] = users.filter(function(name) {
              return name !== localStorage.displayName;
            });
          }
          if (doc.reactions[emoticon] != null) {
            doc.reactions[emoticon].push(localStorage.displayName);
          } else {
            doc.reactions[emoticon] = [localStorage.displayName];
          }
        } else {
          doc.reactions = (
            obj = {},
            obj["" + emoticon] = [localStorage.displayName],
            obj
          );
        }
        return currentDB.put(doc);
      })["catch"](function(err) {
        return arbiter.publish("error", err);
      });
    });
    arbiter.subscribe("messages/search", function(query) {
      if (caughtUp) {
        renderMessages([]);
        $('.progress').fadeIn();
        return localDB.search({
          query: query,
          fields: ['text'],
          include_docs: true
        }).then(function(results) {
          $('.progress').fadeOut();
          return renderMessages(results.rows.reverse(), true);
        })["catch"](function(err) {
          arbiter.publish("error", err);
          return $('.progress').fadeOut();
        });
      } else {
        return Materialize.toast("Sync still in progress");
      }
    });
    arbiter.subscribe("messages/send", function(args) {
      return currentDB.allDocs({
        include_docs: true,
        conflicts: false,
        limit: 1,
        descending: true,
        startkey: "_design"
      }).then(function(results) {
        var idNumber, lastDoc, now;
        lastDoc = results.rows[0].doc;
        now = moment().utc();
        args.time = now.valueOf();
        args.messageNumber = (parseInt(lastDoc.messageNumber) + 1).toString();
        idNumber = args.messageNumber.toString() + args.time.toString();
        args["_id"] = collate.toIndexableString(idNumber).replace(/\u0000/g, '\u0001');
        return currentDB.put(args);
      })["catch"](function(err) {
        return arbiter.publish("error", err);
      });
    });
    arbiter.subscribe("messages/getLast", function(callback) {
      if (caughtUp) {
        $('.progress').fadeIn();
        return currentDB.query("by_author", {
          key: localStorage.displayName,
          limit: 1,
          include_docs: true,
          descending: true
        }).then(function(result) {
          $('.progress').fadeOut();
          return callback(result.rows[0].doc);
        })["catch"](function(err) {
          $('.progress').fadeOut();
          return arbiter.publish("error", err);
        });
      } else {
        return Materialize.toast("Sync still in progress");
      }
    });
    arbiter.subscribe("messages/get", function(args) {
      var callback, id;
      id = args.id;
      callback = args.callback;
      return currentDB.get(id).then(function(doc) {
        return callback(doc);
      })["catch"](function(err) {
        return arbiter.publish("error", err);
      });
    });
    return setInterval(function() {
      return primeQueries();
    }, 10000);
  });

}).call(this);
