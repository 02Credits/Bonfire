// Generated by CoffeeScript 1.12.0
(function() {
  define(["plugins", "arbiter", "underscore"], function(pluginsList, arbiter, _) {
    var generateRenderChildren, i, j, k, len, len1, len2, parent, plugin, pluginDirectory, pluginList, plugins, renderPlugin, root;
    plugins = [];
    for (i = 0, len = pluginsList.length; i < len; i++) {
      pluginList = pluginsList[i];
      plugins = plugins.concat(pluginList);
    }
    root = {};
    pluginDirectory = {};
    for (j = 0, len1 = plugins.length; j < len1; j++) {
      plugin = plugins[j];
      if (plugin.parent === "root") {
        root = plugin;
      }
      pluginDirectory[plugin.name] = plugin;
      plugin.beforePlugins = [];
      plugin.innerPlugins = [];
      plugin.afterPlugins = [];
    }
    for (k = 0, len2 = plugins.length; k < len2; k++) {
      plugin = plugins[k];
      if ((pluginDirectory[plugin.parent] == null) && plugin.parent !== "root") {
        arbiter.publish("error", "nonexistant plugin parent " + plugin.parent);
      } else if (plugin !== root) {
        parent = pluginDirectory[plugin.parent];
        if (plugin.position != null) {
          if (plugin.position === "before") {
            parent.beforePlugins.push(plugin);
          } else if (plugin.position === "after") {
            parent.afterPlugins.push(plugin);
          } else if (plugin.position === "inner") {
            parent.innerPlugins.push(plugin);
          }
        } else {
          parent.innerPlugins.push(plugin);
        }
      }
    }
    generateRenderChildren = function(children) {
      return function(context) {
        return Promise.all((function() {
          var l, len3, results;
          results = [];
          for (l = 0, len3 = children.length; l < len3; l++) {
            plugin = children[l];
            results.push(renderPlugin(context, plugin));
          }
          return results;
        })());
      };
    };
    renderPlugin = function(context, plugin) {
      var renderAfter, renderAll, renderBefore, renderInner, renderInnerAndAfter, vEl;
      renderBefore = generateRenderChildren(plugin.beforePlugins);
      renderInner = generateRenderChildren(plugin.innerPlugins);
      renderAfter = generateRenderChildren(plugin.afterPlugins);
      vEl = [];
      if (plugin.render.length === 4) {
        vEl = plugin.render(context, renderBefore, renderInner, renderAfter);
      } else if (plugin.render.length === 3) {
        renderInnerAndAfter = function(context) {
          var children;
          children = [].concat(renderInner(context)).concat(renderAfter(context));
          return Promise.all(children);
        };
        vEl = plugin.render(context, renderBefore, renderInnerAndAfter);
      } else {
        renderAll = function(context) {
          var children;
          children = [].concat(renderBefore(context)).concat(renderInner(context)).concat(renderAfter(context));
          return Promise.all(children);
        };
        vEl = plugin.render(context, renderAll);
      }
      return vEl;
    };
    return {
      rootPlugin: root,
      pluginDirectory: pluginDirectory,
      render: function(message) {
        return renderPlugin(message, root);
      }
    };
  });

}).call(this);
