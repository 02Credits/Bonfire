<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Namespaces>
  <Namespace Name="Lidgren.Network">
   <Messages>
    <Message Id="Lidgren" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Lidgren' in namespace name 'Lidgren.Network'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\bin\Debug\Lidgren.Network.dll">
   <Modules>
    <Module Name="lidgren.network.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Lidgren.Network.dll' with a strong name key.</Issue>
      </Message>
      <Message Id="Lidgren" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Lidgren' in assembly name 'Lidgren.Network.dll'.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Lidgren.Network">
       <Types>
        <Type Name="CryptoRandom" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'CryptoRandom' because it creates members of the following IDisposable types: 'RNGCryptoServiceProvider'. If 'CryptoRandom' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Instance" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CryptoRandom.Instance' or change the field to one that is an immutable reference type. If the reference type 'CryptoRandom' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MersenneTwisterRandom" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mersenne" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mersenne' in type name 'MersenneTwisterRandom'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Instance" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'MersenneTwisterRandom.Instance' or change the field to one that is an immutable reference type. If the reference type 'MersenneTwisterRandom' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MWCRandom" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MWC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'MWC' in type name 'MWCRandom' by changing it to 'Mwc'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Initialize(System.UInt32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="seed*16777619" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandom.Implementations.cs" Line="33">Correct the potential overflow in the operation 'seed*16777619' in 'MWCRandom.Initialize(uint)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Instance" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'MWCRandom.Instance' or change the field to one that is an immutable reference type. If the reference type 'MWCRandom' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NamespaceDoc" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'NamespaceDoc' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NetAESEncryption" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="AES" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'AES' in type name 'NetAESEncryption' by changing it to 'Aes'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetAESEncryption.cs" Line="9">In method 'NetAESEncryption.NetAESEncryption(NetPeer)', call System.IDisposable.Dispose on object 'new AesCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetAESEncryption.cs" Line="20">In method 'NetAESEncryption.NetAESEncryption(NetPeer, byte[], int, int)', call System.IDisposable.Dispose on object 'new AesCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetAESEncryption.cs" Line="20">'NetAESEncryption.NetAESEncryption(NetPeer, byte[], int, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NetAESEncryption..ctor(NetPeer, Byte[], Int32, Int32)&#xD;&#xA;NetEncryption.SetKey(Byte[], Int32, Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetAESEncryption.cs" Line="14">In method 'NetAESEncryption.NetAESEncryption(NetPeer, string)', call System.IDisposable.Dispose on object 'new AesCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetBigInteger" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="258">'NetBigInteger.NetBigInteger(byte[])' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="44">'NetBigInteger.NetBigInteger(byte[], int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="BigInteger" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="270">Correct the spelling of the unrecognized token 'BigInteger' in the literal '"Zero length BigInteger"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32,System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="375">'NetBigInteger.NetBigInteger(int, byte[])' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32,System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="44">'NetBigInteger.NetBigInteger(int, byte[], int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="99">'NetBigInteger.NetBigInteger(string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="BigInteger" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="110">Correct the spelling of the unrecognized token 'BigInteger' in the literal '"Zero length BigInteger"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="151">Correct the spelling of the unrecognized token 'BigInteger' in the literal '"Zero length BigInteger"'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="158">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'NetBigInteger.NetBigInteger(string, int)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.UInt64.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="187">Because the behavior of 'ulong.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'NetBigInteger.NetBigInteger(string, int)' with a call to 'ulong.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'ulong.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="217">Because the behavior of 'ulong.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'NetBigInteger.NetBigInteger(string, int)' with a call to 'ulong.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'ulong.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#And(Lidgren.Network.NetBigInteger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="495">'NetBigInteger.And(NetBigInteger)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BitLen(System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="608">'NetBigInteger.BitLen(int)' has a cyclomatic complexity of 33. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareTo(Lidgren.Network.NetBigInteger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="687">'NetBigInteger.CompareTo(NetBigInteger)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="632">'NetBigInteger.CompareTo(object)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Gcd(Lidgren.Network.NetBigInteger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="907">'NetBigInteger.Gcd(NetBigInteger)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLowestSetBit()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="2286">'NetBigInteger.GetLowestSetBit()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IntValue" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_IntValue()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="958">'NetBigInteger.IntValue.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MakeMagnitude(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="322">'NetBigInteger.MakeMagnitude(byte[], int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Max(Lidgren.Network.NetBigInteger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="967">'NetBigInteger.Max(NetBigInteger)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Min(Lidgren.Network.NetBigInteger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="973">'NetBigInteger.Min(NetBigInteger)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Modulus(Lidgren.Network.NetBigInteger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="1496">'NetBigInteger.Modulus(NetBigInteger)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SignValue" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_SignValue()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="1961">'NetBigInteger.SignValue.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ToByteArray()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="2040">'NetBigInteger.ToByteArray()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="2160">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'NetBigInteger.ToString(int)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="2164">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'NetBigInteger.ToString(int)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBigInteger.cs" Line="2195">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'NetBigInteger.ToString(int)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetBitVector" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bitsCapacity+31" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitVector.cs" Line="45">Correct the potential overflow in the operation 'bitsCapacity+31' in 'NetBitVector.NetBitVector(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFirstSetIndex()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitVector.cs" Line="90">Change 'NetBitVector.GetFirstSetIndex()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetBitWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReadByte(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetBitWriter.ReadByte(byte[], int, int)', validate parameter 'fromBuffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="byte" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="71">In member 'NetBitWriter.ReadBytes(byte[], int, int, byte[], int)', consider replacing the data type identifier 'Byte' in parameter name 'destinationByteOffset' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetBitWriter.ReadBytes(byte[], int, int, byte[], int)', validate parameter 'fromBuffer' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="94">In externally visible method 'NetBitWriter.ReadBytes(byte[], int, int, byte[], int)', validate parameter 'destination' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadUInt16(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="readBitOffset+8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="216">Correct the potential overflow in the operation 'readBitOffset+8' in 'NetBitWriter.ReadUInt16(byte[], int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadUInt32(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="readBitOffset+8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="263">Correct the potential overflow in the operation 'readBitOffset+8' in 'NetBitWriter.ReadUInt32(byte[], int, int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="272">Correct the potential overflow in the operation 'readBitOffset+8' in 'NetBitWriter.ReadUInt32(byte[], int, int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="283">Correct the potential overflow in the operation 'readBitOffset+8' in 'NetBitWriter.ReadUInt32(byte[], int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadVariableUInt32(System.Byte[],System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="498">Consider a design that does not require that 'offset' be a reference parameter.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetBitWriter.ReadVariableUInt32(byte[], ref int)', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteByte(System.Byte,System.Int32,System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="104">In method 'NetBitWriter.WriteByte(byte, int, byte[], int)', correct the spelling of 'dest' in parameter name 'destBitOffset' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetBitWriter.WriteByte(byte, int, byte[], int)', validate parameter 'destination' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="157">In method 'NetBitWriter.WriteBytes(byte[], int, int, byte[], int)', correct the spelling of 'dest' in parameter name 'destBitOffset' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="byte" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="157">In member 'NetBitWriter.WriteBytes(byte[], int, int, byte[], int)', consider replacing the data type identifier 'Byte' in parameter name 'sourceByteOffset' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetBitWriter.WriteBytes(byte[], int, int, byte[], int)', validate parameter 'source' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="174">In externally visible method 'NetBitWriter.WriteBytes(byte[], int, int, byte[], int)', validate parameter 'destination' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteUInt16(System.UInt16,System.Int32,System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="destinationBitOffset+8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="328">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt16(ushort, int, byte[], int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteUInt32(System.UInt32,System.Int32,System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="destinationBitOffset+8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="352">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt32(uint, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="361">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt32(uint, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="370">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt32(uint, int, byte[], int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteUInt64(System.UInt64,System.Int32,System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="destinationBitOffset+8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="401">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="410">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="419">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="428">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="437">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="446">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="455">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="464">Correct the potential overflow in the operation 'destinationBitOffset+8' in 'NetBitWriter.WriteUInt64(ulong, int, byte[], int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteVariableUInt32(System.Byte[],System.Int32,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBitWriter.cs" Line="485">In externally visible method 'NetBitWriter.WriteVariableUInt32(byte[], int, uint)', validate parameter 'intoBuffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetBlockEncryptionBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'NetBlockEncryptionBase' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetBlockEncryptionBase.cs" Line="22">'NetBlockEncryptionBase.NetBlockEncryptionBase(NetPeer)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NetBlockEncryptionBase..ctor(NetPeer)&#xD;&#xA;NetBlockEncryptionBase.get_BlockSize():Int32</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decrypt(Lidgren.Network.NetIncomingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetBlockEncryptionBase.Decrypt(NetIncomingMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetBlockEncryptionBase.cs" Line="33">In externally visible method 'NetBlockEncryptionBase.Encrypt(NetOutgoingMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetBuffer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.cs" Line="74">Initialize all static fields in 'NetBuffer' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
            <Message Id="System.String.Equals(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.cs" Line="89">'NetBuffer.NetBuffer()' passes 'StringComparison.InvariantCulture' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.cs" Line="79">'NetBuffer.NetBuffer()' passes 'StringComparison.InvariantCulture' as the 'StringComparison' parameter to 'string.StartsWith(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#c_overAllocateAmount" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="cover" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'cover' in member name 'NetBuffer.c_overAllocateAmount' exists as a discrete term. If your usage is intended to be single word, case it as 'cover' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'c' in member name 'NetBuffer.c_overAllocateAmount' by changing it to 'C'.</Issue>
            </Message>
            <Message Id="over" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'over' in member name 'NetBuffer.c_overAllocateAmount' by changing it to 'Over'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'NetBuffer.c_overAllocateAmount'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Data" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.cs" Line="26">Change 'NetBuffer.Data' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureBufferSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="numberOfBits+7" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="57">Correct the potential overflow in the operation 'numberOfBits+7' in 'NetBuffer.EnsureBufferSize(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LengthBytes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_LengthBytes(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value*8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.cs" Line="38">Correct the potential overflow in the operation 'value*8' in 'NetBuffer.LengthBytes.set(int)'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PeekBytes(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="numberOfBytes*8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Peek.cs" Line="96">Correct the potential overflow in the operation 'numberOfBytes*8' in 'NetBuffer.PeekBytes(byte[], int, int)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Peek.cs" Line="97">In externally visible method 'NetBuffer.PeekBytes(byte[], int, int)', validate parameter 'into' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PeekBytes(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="numberOfBytes*8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Peek.cs" Line="84">Correct the potential overflow in the operation 'numberOfBytes*8' in 'NetBuffer.PeekBytes(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PeekFloat()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="float" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Peek.cs" Line="261">Consider replacing the language-specific data type identifier 'Float' in member name 'NetBuffer.PeekFloat()' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadAllFields(System.Object,System.Reflection.BindingFlags)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.Reflection.cs" Line="38">In member 'NetBuffer.ReadAllFields(object, BindingFlags)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadAllProperties(System.Object,System.Reflection.BindingFlags)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.Reflection.cs" Line="76">In member 'NetBuffer.ReadAllProperties(object, BindingFlags)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadBits(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="131">In externally visible method 'NetBuffer.ReadBits(byte[], int, int)', validate parameter 'into' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadByte(System.Byte&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="42">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadBytes(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="8*numberOfBytes" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="118">Correct the potential overflow in the operation '8*numberOfBytes' in 'NetBuffer.ReadBytes(byte[], int, int)'.</Issue>
            </Message>
            <Message Id="numberOfBytes*8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="114">Correct the potential overflow in the operation 'numberOfBytes*8' in 'NetBuffer.ReadBytes(byte[], int, int)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="115">In externally visible method 'NetBuffer.ReadBytes(byte[], int, int)', validate parameter 'into' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadBytes(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="8*numberOfBytes" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="85">Correct the potential overflow in the operation '8*numberOfBytes' in 'NetBuffer.ReadBytes(int)'.</Issue>
            </Message>
            <Message Id="numberOfBytes*8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="81">Correct the potential overflow in the operation 'numberOfBytes*8' in 'NetBuffer.ReadBytes(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadBytes(System.Int32,System.Byte[]&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="93">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
            <Message Id="8*numberOfBytes" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="102">Correct the potential overflow in the operation '8*numberOfBytes' in 'NetBuffer.ReadBytes(int, out byte[])'.</Issue>
            </Message>
            <Message Id="numberOfBytes*8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="94">Correct the potential overflow in the operation 'numberOfBytes*8' in 'NetBuffer.ReadBytes(int, out byte[])'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadFloat()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="float" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="333">Consider replacing the language-specific data type identifier 'Float' in member name 'NetBuffer.ReadFloat()' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadInt32(System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="184">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadRangedInteger(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="integer" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="539">Consider replacing the language-specific data type identifier 'Integer' in member name 'NetBuffer.ReadRangedInteger(int, int)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadSingle(System.Single&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="359">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadString(System.String&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="585">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadTime(Lidgren.Network.NetConnection,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ReadTime" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="632">Correct the spelling of the unrecognized token 'ReadTime' in the literal '"Cannot call ReadTime() on message without a connected sender (ie. unconnected me..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadUInt32(System.UInt32&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="240">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadVariableUInt32(System.UInt32&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Read.cs" Line="427">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Write(Lidgren.Network.NetBuffer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="663">In externally visible method 'NetBuffer.Write(NetBuffer)', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Write(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="numberOfBytes*8" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="146">Correct the potential overflow in the operation 'numberOfBytes*8' in 'NetBuffer.Write(byte[], int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Write(System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="611">In externally visible method 'NetBuffer.Write(IPEndPoint)', validate parameter 'endPoint' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteAllFields(System.Object,System.Reflection.BindingFlags)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.Reflection.cs" Line="38">In member 'NetBuffer.WriteAllFields(object, BindingFlags)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteAllProperties(System.Object,System.Reflection.BindingFlags)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.Reflection.cs" Line="71">In member 'NetBuffer.WriteAllProperties(object, BindingFlags)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteAt(System.Int32,System.Int16)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="offset+16" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="203">Correct the potential overflow in the operation 'offset+16' in 'NetBuffer.WriteAt(int, short)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteAt(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="offset+32" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="248">Correct the potential overflow in the operation 'offset+32' in 'NetBuffer.WriteAt(int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteAt(System.Int32,System.UInt16)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="offset+16" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="170">Correct the potential overflow in the operation 'offset+16' in 'NetBuffer.WriteAt(int, ushort)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteAt(System.Int32,System.UInt32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="offset+32" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="296">Correct the potential overflow in the operation 'offset+32' in 'NetBuffer.WriteAt(int, uint)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteAt(System.Int32,System.UInt64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="offset+64" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="354">Correct the potential overflow in the operation 'offset+64' in 'NetBuffer.WriteAt(int, ulong)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteRangedInteger(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="integer" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetBuffer.Write.cs" Line="577">Consider replacing the language-specific data type identifier 'Integer' in member name 'NetBuffer.WriteRangedInteger(int, int, int)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeerConfiguration)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="74">In externally visible method 'NetClient.NetClient(NetPeerConfiguration)', validate parameter 'config' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Connect(System.Net.IPEndPoint,Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="89">Method 'NetClient.Connect(IPEndPoint, NetOutgoingMessage)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Connect attempt failed; Already connected".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="98">Method 'NetClient.Connect(IPEndPoint, NetOutgoingMessage)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Connect attempt failed; Handshake already in progress".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Disconnect(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="126">Method 'NetClient.Disconnect(string)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Disconnect requested when not connected!".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetDeliveryMethod)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="140">Method 'NetClient.SendMessage(NetOutgoingMessage, NetDeliveryMethod)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Cannot send message, no server connection!".</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="136">In method 'NetClient.SendMessage(NetOutgoingMessage, NetDeliveryMethod)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetDeliveryMethod,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="155">Method 'NetClient.SendMessage(NetOutgoingMessage, NetDeliveryMethod, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Cannot send message, no server connection!".</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="151">In method 'NetClient.SendMessage(NetOutgoingMessage, NetDeliveryMethod, int)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ServerConnection" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ServerConnection()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetClient.cs" Line="43">Modify 'NetClient.ServerConnection.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NetConnection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Approve()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="228">Method 'NetConnection.Approve()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Approve() called in wrong status; expected RespondedAwaitingApproval; got ".</Issue>
            </Message>
            <Message Id="RespondedAwaitingApproval" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="228">Correct the spelling of the unrecognized token 'RespondedAwaitingApproval' in the literal '"Approve() called in wrong status; expected RespondedAwaitingApproval; got "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Approve(Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="245">Method 'NetConnection.Approve(NetOutgoingMessage)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Approve() called in wrong status; expected RespondedAwaitingApproval; got ".</Issue>
            </Message>
            <Message Id="RespondedAwaitingApproval" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="245">Correct the spelling of the unrecognized token 'RespondedAwaitingApproval' in the literal '"Approve() called in wrong status; expected RespondedAwaitingApproval; got "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateReceiverChannel(Lidgren.Network.NetMessageType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NetDeliveryMethod" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="510">Correct the spelling of the unrecognized token 'NetDeliveryMethod' in the literal '"Unhandled NetDeliveryMethod!"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CurrentMTU" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MTU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.MTU.cs" Line="30">Correct the casing of 'MTU' in member name 'NetConnection.CurrentMTU' by changing it to 'Mtu'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnqueueMessage(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetDeliveryMethod,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.ThrowOrLog(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="345">Method 'NetConnection.EnqueueMessage(NetOutgoingMessage, NetDeliveryMethod, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.ThrowOrLog(string)'. Retrieve the following string(s) from a resource table instead: "Reliable message too large! Fragmentation failure?".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSendQueueInfo(Lidgren.Network.NetDeliveryMethod,System.Int32,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="530">Consider a design that does not require that 'windowSize' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="530">Consider a design that does not require that 'freeWindowSlots' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleConnectResponse(System.Double,Lidgren.Network.NetMessageType,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="now" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="398">Parameter 'now' of 'NetConnection.HandleConnectResponse(double, NetMessageType, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="tp" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="398">Parameter 'tp' of 'NetConnection.HandleConnectResponse(double, NetMessageType, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_infrequentEventsSkipFrames" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'NetConnection.m_infrequentEventsSkipFrames' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_messageCoalesceFrames" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'NetConnection.m_messageCoalesceFrames' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReceivedHandshake(System.Double,Lidgren.Network.NetMessageType,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="320">Method 'NetConnection.ReceivedHandshake(double, NetMessageType, int, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Ignoring multiple Connect() most likely due to a delayed Approval".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="373">Modify 'NetConnection.ReceivedHandshake(double, NetMessageType, int, int)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReceivedLibraryMessage(Lidgren.Network.NetMessageType,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="466">Method 'NetConnection.ReceivedLibraryMessage(NetMessageType, int, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Connection received unhandled library message: ".</Issue>
            </Message>
            <Message Id="Lidgren.Network.NetPeer.ThrowOrLog(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="416">Method 'NetConnection.ReceivedLibraryMessage(NetMessageType, int, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.ThrowOrLog(string)'. Retrieve the following string(s) from a resource table instead: "LibraryError received by ReceivedLibraryMessage; this usually indicates a malfor...".</Issue>
            </Message>
            <Message Id="LibraryError" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="416">Correct the spelling of the unrecognized token 'LibraryError' in the literal '"LibraryError received by ReceivedLibraryMessage; this usually indicates a malfor..."'.</Issue>
            </Message>
            <Message Id="ReceivedLibraryMessage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="416">Correct the spelling of the unrecognized token 'ReceivedLibraryMessage' in the literal '"LibraryError received by ReceivedLibraryMessage; this usually indicates a malfor..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetDeliveryMethod,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.cs" Line="325">In method 'NetConnection.SendMessage(NetOutgoingMessage, NetDeliveryMethod, int)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnconnectedHeartbeat(System.Single)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="87">Method 'NetConnection.UnconnectedHeartbeat(float)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Time to resend handshake, but status is ".</Issue>
            </Message>
            <Message Id="Lidgren.Network.NetPeer.ThrowOrLog(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="47">Method 'NetConnection.UnconnectedHeartbeat(float)' passes a literal string as parameter 'message' of a call to 'NetPeer.ThrowOrLog(string)'. Retrieve the following string(s) from a resource table instead: "This connection is Disconnected; spent. A new one should have been created".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateHandshakeData(System.Int32,System.Int32,System.Byte[]&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="466">Method 'NetConnection.ValidateHandshakeData(int, int, out byte[])' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "ReadRemoteHandshakeData failed: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="462">Modify 'NetConnection.ValidateHandshakeData(int, int, out byte[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ReadRemoteHandshakeData" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="466">Correct the spelling of the unrecognized token 'ReadRemoteHandshakeData' in the literal '"ReadRemoteHandshakeData failed: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteLocalHail(Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.ThrowOrLog(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetConnection.Handshake.cs" Line="201">Method 'NetConnection.WriteLocalHail(NetOutgoingMessage)' passes a literal string as parameter 'message' of a call to 'NetPeer.ThrowOrLog(string)'. Retrieve the following string(s) from a resource table instead: "Hail message too large; can maximally be ".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetCryptoProviderBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'NetCryptoProviderBase' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.Security.Cryptography.SymmetricAlgorithm)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="algo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetCryptoProviderBase.cs" Line="11">In method 'NetCryptoProviderBase.NetCryptoProviderBase(NetPeer, SymmetricAlgorithm)', correct the spelling of 'algo' in parameter name 'algo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetCryptoProviderBase.cs" Line="15">In externally visible method 'NetCryptoProviderBase.NetCryptoProviderBase(NetPeer, SymmetricAlgorithm)', validate parameter 'algo' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decrypt(Lidgren.Network.NetIncomingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetCryptoProviderBase.cs" Line="60">In method 'NetCryptoProviderBase.Decrypt(NetIncomingMessage)', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetCryptoProviderBase.cs" Line="58">In externally visible method 'NetCryptoProviderBase.Decrypt(NetIncomingMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetCryptoProviderBase.cs" Line="38">In method 'NetCryptoProviderBase.Encrypt(NetOutgoingMessage)', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetCryptoProviderBase.cs" Line="45">Object 'ms' can be disposed more than once in method 'NetCryptoProviderBase.Encrypt(NetOutgoingMessage)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 45</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetCryptoProviderBase.cs" Line="36">In externally visible method 'NetCryptoProviderBase.Encrypt(NetOutgoingMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_algorithm" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NetCryptoProviderBase.m_algorithm' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetKey(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetCryptoProviderBase.SetKey(byte[], int, int)', validate parameter 'data' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetDeliveryMethod" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumStorageShouldBeInt32" Category="Microsoft.Design" CheckId="CA1028" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="NotInt32" Certainty="60" Level="Warning">If possible, make the underlying type of 'NetDeliveryMethod' System.Int32 instead of 'byte'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NetDESEncryption" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="DES" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'DES' in type name 'NetDESEncryption' by changing it to 'Des'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetDESEncryption.cs" Line="9">In method 'NetDESEncryption.NetDESEncryption(NetPeer)', call System.IDisposable.Dispose on object 'new DESCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetDESEncryption.cs" Line="20">In method 'NetDESEncryption.NetDESEncryption(NetPeer, byte[], int, int)', call System.IDisposable.Dispose on object 'new DESCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetDESEncryption.cs" Line="20">'NetDESEncryption.NetDESEncryption(NetPeer, byte[], int, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NetDESEncryption..ctor(NetPeer, Byte[], Int32, Int32)&#xD;&#xA;NetEncryption.SetKey(Byte[], Int32, Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetDESEncryption.cs" Line="14">In method 'NetDESEncryption.NetDESEncryption(NetPeer, string)', call System.IDisposable.Dispose on object 'new DESCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetEncryption" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'NetEncryption' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Decrypt(Lidgren.Network.NetIncomingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NetEncryption.Decrypt(NetIncomingMessage)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NetEncryption.Encrypt(NetOutgoingMessage)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_peer" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NetEncryption.m_peer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetKey(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetEncryption.cs" Line="28">In method 'NetEncryption.SetKey(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NetException': private NetException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'NetException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NetIncomingMessage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Decrypt(Lidgren.Network.NetEncryption)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetIncomingMessage.cs" Line="95">In externally visible method 'NetIncomingMessage.Decrypt(NetEncryption)', validate parameter 'encryption' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetOutgoingMessage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Encrypt(Lidgren.Network.NetEncryption)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetOutgoingMessage.cs" Line="121">In externally visible method 'NetOutgoingMessage.Encrypt(NetEncryption)', validate parameter 'encryption' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetPeer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'NetPeer' because it creates members of the following IDisposable types: 'AutoResetEvent', 'Socket'. If 'NetPeer' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AcceptConnection(Lidgren.Network.NetConnection)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="739">Method 'NetPeer.AcceptConnection(NetConnection)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "AcceptConnection called but m_connection already contains it!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="733">Method 'NetPeer.AcceptConnection(NetConnection)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "AcceptConnection called but m_handshakes did not contain it!".</Issue>
            </Message>
            <Message Id="AcceptConnection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="739">Correct the spelling of the unrecognized token 'AcceptConnection' in the literal '"AcceptConnection called but m_connection already contains it!"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="733">Correct the spelling of the unrecognized token 'AcceptConnection' in the literal '"AcceptConnection called but m_handshakes did not contain it!"'.</Issue>
            </Message>
            <Message Id="mconnection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="739">Correct the spelling of the unrecognized token 'mconnection' in the literal '"AcceptConnection called but m_connection already contains it!"'.</Issue>
            </Message>
            <Message Id="mhandshakes" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="733">Correct the spelling of the unrecognized token 'mhandshakes' in the literal '"AcceptConnection called but m_handshakes did not contain it!"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ActuallySendPacket(System.Byte[],System.Int32,System.Net.IPEndPoint,System.Boolean&amp;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogError(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="166">Method 'NetPeer.ActuallySendPacket(byte[], int, IPEndPoint, out bool)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogError(string)'. Retrieve the following string(s) from a resource table instead: "Failed to send packet: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="170">Method 'NetPeer.ActuallySendPacket(byte[], int, IPEndPoint, out bool)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogError(string)'. Retrieve the following string(s) from a resource table instead: "Failed to send packet: ".</Issue>
            </Message>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="148">Method 'NetPeer.ActuallySendPacket(byte[], int, IPEndPoint, out bool)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Failed to send the full , ; only ,  bytes sent in packet!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="157">Method 'NetPeer.ActuallySendPacket(byte[], int, IPEndPoint, out bool)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Socket threw exception; would block - send buffer full? Increase in NetPeerConfi...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="168">Modify 'NetPeer.ActuallySendPacket(byte[], int, IPEndPoint, out bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="157">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"Socket threw exception; would block - send buffer full? Increase in NetPeerConfi..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BindSocket(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="146">Modify 'NetPeer.BindSocket(bool)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Connect(System.Net.IPEndPoint,Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="295">Method 'NetPeer.Connect(IPEndPoint, NetOutgoingMessage)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Weird situation; Connect() already in progress to remote endpoint; but hs status...".</Issue>
            </Message>
            <Message Id="hs" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="295">Correct the spelling of the unrecognized token 'hs' in the literal '"Weird situation; Connect() already in progress to remote endpoint; but hs status..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Connections" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="81">Change 'List&lt;NetConnection&gt;' in 'NetPeer.Connections' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateMessage(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.MessagePools.cs" Line="111">In externally visible method 'NetPeer.CreateMessage(string)', validate parameter 'content' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecutePeerShutdown()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="285">Modify 'NetPeer.ExecutePeerShutdown()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="294">Modify 'NetPeer.ExecutePeerShutdown()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlushDelayedPackets()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="128">Modify 'NetPeer.FlushDelayedPackets()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetConnection(System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ep" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="166">In method 'NetPeer.GetConnection(IPEndPoint)', correct the spelling of 'ep' in parameter name 'ep' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMTU(System.Collections.Generic.IList`1&lt;Lidgren.Network.NetConnection&gt;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="GetMTU" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="74">Correct the spelling of the unrecognized token 'GetMTU' in the literal '"GetMTU called with no recipients"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleReleasedFragment(Lidgren.Network.NetIncomingMessage)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Fragmentation.cs" Line="114">Method 'NetPeer.HandleReleasedFragment(NetIncomingMessage)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Index out of bounds for chunk ,  (total chunks , )".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Heartbeat()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="324">'NetPeer.Heartbeat()' is coupled with 32 different types from 9 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="324">'NetPeer.Heartbeat()' has a cyclomatic complexity of 43. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="Lidgren.Network.NetPeer.LogError(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="581">Method 'NetPeer.Heartbeat()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogError(string)'. Retrieve the following string(s) from a resource table instead: "Packet parsing error: ,  from ".</Issue>
            </Message>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="444">Method 'NetPeer.Heartbeat()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "ConnectionReset".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="522">Method 'NetPeer.Heartbeat()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Malformed packet; stated payload length , , remaining bytes ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="349">Method 'NetPeer.Heartbeat()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Sanity fail! Connection in handshake list under wrong key!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="358">Method 'NetPeer.Heartbeat()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Sanity fail! Handshakes list contained disconnected connection!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="453">Method 'NetPeer.Heartbeat()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Socket exception: ".</Issue>
            </Message>
            <Message Id="Lidgren.Network.NetPeer.ThrowOrLog(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="528">Method 'NetPeer.Heartbeat()' passes a literal string as parameter 'message' of a call to 'NetPeer.ThrowOrLog(string)'. Retrieve the following string(s) from a resource table instead: "Unexpected NetMessageType: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="478">Modify 'NetPeer.Heartbeat()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="579">Modify 'NetPeer.Heartbeat()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ConnectionReset" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="444">Correct the spelling of the unrecognized token 'ConnectionReset' in the literal '"ConnectionReset"'.</Issue>
            </Message>
            <Message Id="NetMessageType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="528">Correct the spelling of the unrecognized token 'NetMessageType' in the literal '"Unexpected NetMessageType: "'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="473">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'NetPeer.Heartbeat()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="473">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'NetPeer.Heartbeat()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="474">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'NetPeer.Heartbeat()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeNetwork()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="196">Method 'NetPeer.InitializeNetwork()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Failed to get Mac address".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Introduce(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Net.IPEndPoint,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="4" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetNatIntroduction.cs" Line="20">In externally visible method 'NetPeer.Introduce(IPEndPoint, IPEndPoint, IPEndPoint, IPEndPoint, string)', validate parameter 'token' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NetworkLoop()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="230">Modify 'NetPeer.NetworkLoop()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RawSend(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="arr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="323">In method 'NetPeer.RawSend(byte[], int, int, IPEndPoint)', correct the spelling of 'arr' in parameter name 'arr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadMessages(System.Collections.Generic.IList`1&lt;Lidgren.Network.NetIncomingMessage&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="216">In externally visible method 'NetPeer.ReadMessages(IList&lt;NetIncomingMessage&gt;)', validate parameter 'addTo' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReceivedUnconnectedLibraryMessage(System.Double,System.Net.IPEndPoint,Lidgren.Network.NetMessageType,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="694">Method 'NetPeer.ReceivedUnconnectedLibraryMessage(double, IPEndPoint, NetMessageType, int, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Received Connect, but we\'re not accepting incoming connections!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="689">Method 'NetPeer.ReceivedUnconnectedLibraryMessage(double, IPEndPoint, NetMessageType, int, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Received unhandled library message ,  from ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="722">Method 'NetPeer.ReceivedUnconnectedLibraryMessage(double, IPEndPoint, NetMessageType, int, int)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Received unhandled library message ,  from ".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Recycle(Lidgren.Network.NetIncomingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.MessagePools.cs" Line="158">In method 'NetPeer.Recycle(NetIncomingMessage)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.MessagePools.cs" Line="164">In externally visible method 'NetPeer.Recycle(NetIncomingMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Recycle(System.Collections.Generic.IEnumerable`1&lt;Lidgren.Network.NetIncomingMessage&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.MessagePools.cs" Line="180">In externally visible method 'NetPeer.Recycle(IEnumerable&lt;NetIncomingMessage&gt;)', validate parameter 'toRecycle' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterReceivedCallback(System.Threading.SendOrPostCallback,System.Threading.SynchronizationContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="53">Replace method 'NetPeer.RegisterReceivedCallback(SendOrPostCallback, SynchronizationContext)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="SynchronizationContext" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="57">Correct the spelling of the unrecognized token 'SynchronizationContext' in the literal '"Need a SynchronizationContext to register callback on correct thread!"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReleaseMessage(Lidgren.Network.NetIncomingMessage)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="110">Method 'NetPeer.ReleaseMessage(NetIncomingMessage)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Receive callback exception:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Internal.cs" Line="108">Modify 'NetPeer.ReleaseMessage(NetIncomingMessage)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendDiscoveryResponse(Lidgren.Network.NetOutgoingMessage,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Discovery.cs" Line="44">In method 'NetPeer.SendDiscoveryResponse(NetOutgoingMessage, IPEndPoint)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetConnection,Lidgren.Network.NetDeliveryMethod)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="17">In method 'NetPeer.SendMessage(NetOutgoingMessage, NetConnection, NetDeliveryMethod)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetConnection,Lidgren.Network.NetDeliveryMethod,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="29">In method 'NetPeer.SendMessage(NetOutgoingMessage, NetConnection, NetDeliveryMethod, int)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="46">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
            <Message Id="SendMessage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="46">Correct the spelling of the unrecognized token 'SendMessage' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Lidgren.Network.NetOutgoingMessage,System.Collections.Generic.List`1&lt;Lidgren.Network.NetConnection&gt;,Lidgren.Network.NetDeliveryMethod,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="99">Change 'List&lt;NetConnection&gt;' in 'NetPeer.SendMessage(NetOutgoingMessage, List&lt;NetConnection&gt;, NetDeliveryMethod, int)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="99">In method 'NetPeer.SendMessage(NetOutgoingMessage, List&lt;NetConnection&gt;, NetDeliveryMethod, int)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="109">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
            <Message Id="SendMessage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="109">Correct the spelling of the unrecognized token 'SendMessage' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMTUPacket(System.Int32,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogError(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="207">Method 'NetPeer.SendMTUPacket(int, IPEndPoint)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogError(string)'. Retrieve the following string(s) from a resource table instead: "Failed to send packet: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="203">Method 'NetPeer.SendMTUPacket(int, IPEndPoint)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogError(string)'. Retrieve the following string(s) from a resource table instead: "Failed to send packet: (, ) ".</Issue>
            </Message>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="187">Method 'NetPeer.SendMTUPacket(int, IPEndPoint)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Failed to send the full , ; only ,  bytes sent in packet!".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="198">Method 'NetPeer.SendMTUPacket(int, IPEndPoint)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Socket threw exception; would block - send buffer full? Increase in NetPeerConfi...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="205">Modify 'NetPeer.SendMTUPacket(int, IPEndPoint)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="198">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"Socket threw exception; would block - send buffer full? Increase in NetPeerConfi..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendPacket(System.Int32,System.Net.IPEndPoint,System.Int32,System.Boolean&amp;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="wasSent" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.LatencySimulation.cs" Line="67">'NetPeer.SendPacket(int, IPEndPoint, int, out bool)' declares a variable, 'wasSent', of type 'bool', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendUnconnectedMessage(Lidgren.Network.NetOutgoingMessage,System.Collections.Generic.IList`1&lt;System.Net.IPEndPoint&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="190">In method 'NetPeer.SendUnconnectedMessage(NetOutgoingMessage, IList&lt;IPEndPoint&gt;)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="MaximumTransmissionUnit" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="200">Correct the spelling of the unrecognized token 'MaximumTransmissionUnit' in the literal '"Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTran..."'.</Issue>
            </Message>
            <Message Id="NetConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="200">Correct the spelling of the unrecognized token 'NetConfiguration' in the literal '"Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTran..."'.</Issue>
            </Message>
            <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="198">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
            <Message Id="SendMessage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="198">Correct the spelling of the unrecognized token 'SendMessage' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendUnconnectedMessage(Lidgren.Network.NetOutgoingMessage,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="169">In method 'NetPeer.SendUnconnectedMessage(NetOutgoingMessage, IPEndPoint)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="MaximumTransmissionUnit" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="177">Correct the spelling of the unrecognized token 'MaximumTransmissionUnit' in the literal '"Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTran..."'.</Issue>
            </Message>
            <Message Id="NetConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="177">Correct the spelling of the unrecognized token 'NetConfiguration' in the literal '"Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTran..."'.</Issue>
            </Message>
            <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="175">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
            <Message Id="SendMessage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="175">Correct the spelling of the unrecognized token 'SendMessage' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendUnconnectedMessage(Lidgren.Network.NetOutgoingMessage,System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="144">In method 'NetPeer.SendUnconnectedMessage(NetOutgoingMessage, string, int)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="MaximumTransmissionUnit" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="152">Correct the spelling of the unrecognized token 'MaximumTransmissionUnit' in the literal '"Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTran..."'.</Issue>
            </Message>
            <Message Id="NetConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="152">Correct the spelling of the unrecognized token 'NetConfiguration' in the literal '"Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTran..."'.</Issue>
            </Message>
            <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="150">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
            <Message Id="SendMessage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="150">Correct the spelling of the unrecognized token 'SendMessage' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendUnconnectedToSelf(Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="214">In method 'NetPeer.SendUnconnectedToSelf(NetOutgoingMessage)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="218">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
            <Message Id="SendMessage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.Send.cs" Line="218">Correct the spelling of the unrecognized token 'SendMessage' in the literal '"This message has already been sent! Use NetPeer.SendMessage() to send to multipl..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Start()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="133">Method 'NetPeer.Start()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Start() called on already running NetPeer - ignoring.".</Issue>
            </Message>
            <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="133">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"Start() called on already running NetPeer - ignoring."'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="143">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'NetPeer.Start()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowOrLog(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="335">The 'this' parameter (or 'Me' in Visual Basic) of 'NetPeer.ThrowOrLog(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPnP" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="64">Correct the casing of 'Pn' in member name 'NetPeer.UPnP' by changing it to 'PN'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeer.cs" Line="64">Correct the spelling of 'Pn' in member name 'NetPeer.UPnP' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetPeerConfiguration" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AutoExpandMTU" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MTU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="421">Correct the casing of 'MTU' in member name 'NetPeerConfiguration.AutoExpandMTU' by changing it to 'Mtu'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_AutoExpandMTU(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="425">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="425">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#BroadcastAddress" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BroadcastAddress(System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="337">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="337">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#EnableUPnP" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="296">Correct the casing of 'Pn' in member name 'NetPeerConfiguration.EnableUPnP' by changing it to 'PN'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="296">Correct the spelling of 'Pn' in member name 'NetPeerConfiguration.EnableUPnP' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_EnableUPnP(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="300">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="300">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ExpandMTUFailAttempts" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MTU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="444">Correct the casing of 'MTU' in member name 'NetPeerConfiguration.ExpandMTUFailAttempts' by changing it to 'Mtu'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExpandMTUFrequency" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MTU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="435">Correct the casing of 'MTU' in member name 'NetPeerConfiguration.ExpandMTUFrequency' by changing it to 'Mtu'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#kDefaultMTU" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MTU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MTU' in member name 'NetPeerConfiguration.kDefaultMTU' by changing it to 'Mtu'.</Issue>
            </Message>
            <Message Id="k" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'k' in member name 'NetPeerConfiguration.kDefaultMTU' by changing it to 'K'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocalAddress" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_LocalAddress(System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="323">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="323">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MaximumConnections" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_MaximumConnections(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="210">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="210">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MaximumHandshakeAttempts" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_MaximumHandshakeAttempts(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="MaximumHandshakeAttempts" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="411">Correct the spelling of the unrecognized token 'MaximumHandshakeAttempts' in the literal '"MaximumHandshakeAttempts must be at least 1"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MaximumTransmissionUnit" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_MaximumTransmissionUnit(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="MaximumTransmissionUnit" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="226">Correct the spelling of the unrecognized token 'MaximumTransmissionUnit' in the literal '"MaximumTransmissionUnit must be between 1 and "'.</Issue>
              </Message>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="224">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="224">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#NetworkThreadName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_NetworkThreadName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="196">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"NetworkThreadName may not be set after the NetPeer which uses the configuration ..."'.</Issue>
              </Message>
              <Message Id="NetworkThreadName" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="196">Correct the spelling of the unrecognized token 'NetworkThreadName' in the literal '"NetworkThreadName may not be set after the NetPeer which uses the configuration ..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Port" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Port(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="351">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="351">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ReceiveBufferSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ReceiveBufferSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="365">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="365">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#RecycledCacheMaxCount" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_RecycledCacheMaxCount(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="272">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="272">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SendBufferSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_SendBufferSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="379">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="379">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UnreliableSizeBehaviour" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Behaviour" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="183">Correct the spelling of 'Behaviour' in member name 'NetPeerConfiguration.UnreliableSizeBehaviour' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UseMessageRecycling" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_UseMessageRecycling(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="NetPeer" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="258">Correct the spelling of the unrecognized token 'NetPeer' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
              <Message Id="NetPeerConfiguration" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerConfiguration.cs" Line="258">Correct the spelling of the unrecognized token 'NetPeerConfiguration' in the literal '"You may not modify the NetPeerConfiguration after it has been used to initialize..."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NetPeerStatistics" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetPeerStatistics.cs" Line="151">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'NetPeerStatistics.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetQueue`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'NetQueue&lt;T&gt;' so that it does not end in 'Queue'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'NetQueue&lt;T&gt;' because it creates members of the following IDisposable types: 'ReaderWriterLockSlim'. If 'NetQueue&lt;T&gt;' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Enqueue(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetQueue.cs" Line="99">In externally visible method 'NetQueue&lt;T&gt;.Enqueue(IEnumerable&lt;T&gt;)', validate parameter 'items' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryDrain(System.Collections.Generic.IList`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetQueue.cs" Line="226">In externally visible method 'NetQueue&lt;T&gt;.TryDrain(IList&lt;T&gt;)', validate parameter 'addTo' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetRandom" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'NetRandom' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandom.cs" Line="22">'NetRandom.NetRandom()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NetRandom..ctor()&#xD;&#xA;NetRandom.Initialize(UInt32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandom.cs" Line="30">'NetRandom.NetRandom(int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NetRandom..ctor(Int32)&#xD;&#xA;NetRandom.Initialize(UInt32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Instance" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'NetRandom.Instance' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NextBool()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bool" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandom.cs" Line="135">Consider replacing the language-specific data type identifier 'Bool' in member name 'NetRandom.NextBool()' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NextBytes(System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandom.cs" Line="174">In externally visible method 'NetRandom.NextBytes(byte[])', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NextBytes(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandom.cs" Line="158">In externally visible method 'NetRandom.NextBytes(byte[], int, int)', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetRandomSeed" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetUInt32()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandomSeed.cs" Line="18">Change 'NetRandomSeed.GetUInt32()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUInt64()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetRandomSeed.cs" Line="30">Change 'NetRandomSeed.GetUInt64()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_seedIncrement" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'NetRandomSeed.m_seedIncrement' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetRC2Encryption" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetRC2Encryption.cs" Line="9">In method 'NetRC2Encryption.NetRC2Encryption(NetPeer)', call System.IDisposable.Dispose on object 'new RC2CryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetRC2Encryption.cs" Line="20">In method 'NetRC2Encryption.NetRC2Encryption(NetPeer, byte[], int, int)', call System.IDisposable.Dispose on object 'new RC2CryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetRC2Encryption.cs" Line="20">'NetRC2Encryption.NetRC2Encryption(NetPeer, byte[], int, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NetRC2Encryption..ctor(NetPeer, Byte[], Int32, Int32)&#xD;&#xA;NetEncryption.SetKey(Byte[], Int32, Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetRC2Encryption.cs" Line="14">In method 'NetRC2Encryption.NetRC2Encryption(NetPeer, string)', call System.IDisposable.Dispose on object 'new RC2CryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetReliableSenderChannel" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#DestoreMessage(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="mstoredMessages" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetReliableSenderChannel.cs" Line="137">Correct the spelling of the unrecognized token 'mstoredMessages' in the literal '"m_storedMessages["'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetServer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeerConfiguration)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetServer.cs" Line="17">In externally visible method 'NetServer.NetServer(NetPeerConfiguration)', validate parameter 'config' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendToAll(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetConnection,Lidgren.Network.NetDeliveryMethod,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetServer.cs" Line="42">In method 'NetServer.SendToAll(NetOutgoingMessage, NetConnection, NetDeliveryMethod, int)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendToAll(Lidgren.Network.NetOutgoingMessage,Lidgren.Network.NetDeliveryMethod)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetServer.cs" Line="26">In method 'NetServer.SendToAll(NetOutgoingMessage, NetDeliveryMethod)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetSRP" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="SRP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'SRP' in type name 'NetSRP' by changing it to 'Srp'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ComputeClientSessionValue(System.Byte[],System.Byte[],System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="udata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetSRP.cs" Line="173">In method 'NetSRP.ComputeClientSessionValue(byte[], byte[], byte[], byte[])', correct the spelling of 'udata' in parameter name 'udata' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="xdata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetSRP.cs" Line="173">In method 'NetSRP.ComputeClientSessionValue(byte[], byte[], byte[], byte[])', correct the spelling of 'xdata' in parameter name 'xdata' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ComputePrivateKey(System.String,System.String,System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetSRP.cs" Line="69">In member 'NetSRP.ComputePrivateKey(string, string, byte[])', the discrete term 'username' in parameter name 'username' should be expressed as a compound word, 'userName'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetSRP.cs" Line="75">In externally visible method 'NetSRP.ComputePrivateKey(string, string, byte[])', validate parameter 'salt' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ComputeServerSessionValue(System.Byte[],System.Byte[],System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="udata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetSRP.cs" Line="157">In method 'NetSRP.ComputeServerSessionValue(byte[], byte[], byte[], byte[])', correct the spelling of 'udata' in parameter name 'udata' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetTime" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToReadable(System.Double)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Double.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetTime.cs" Line="58">Because the behavior of 'double.ToString(string)' could vary based on the current user's locale settings, replace this call in 'NetTime.ToReadable(double)' with a call to 'double.ToString(string, IFormatProvider)'. If the result of 'double.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetTripleDESEncryption" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="DES" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'DES' in type name 'NetTripleDESEncryption' by changing it to 'Des'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetTripleDESEncryption.cs" Line="9">In method 'NetTripleDESEncryption.NetTripleDESEncryption(NetPeer)', call System.IDisposable.Dispose on object 'new TripleDESCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetTripleDESEncryption.cs" Line="20">In method 'NetTripleDESEncryption.NetTripleDESEncryption(NetPeer, byte[], int, int)', call System.IDisposable.Dispose on object 'new TripleDESCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetTripleDESEncryption.cs" Line="20">'NetTripleDESEncryption.NetTripleDESEncryption(NetPeer, byte[], int, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NetTripleDESEncryption..ctor(NetPeer, Byte[], Int32, Int32)&#xD;&#xA;NetEncryption.SetKey(Byte[], Int32, Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetTripleDESEncryption.cs" Line="14">In method 'NetTripleDESEncryption.NetTripleDESEncryption(NetPeer, string)', call System.IDisposable.Dispose on object 'new TripleDESCryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetUnreliableSizeBehaviour" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Behaviour" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Behaviour' in type name 'NetUnreliableSizeBehaviour'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DropAboveMTU" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MTU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MTU' in member name 'NetUnreliableSizeBehaviour.DropAboveMTU' by changing it to 'Mtu'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IgnoreMTU" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MTU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MTU' in member name 'NetUnreliableSizeBehaviour.IgnoreMTU' by changing it to 'Mtu'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetUPnP" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'NetUPnP' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'NetUPnP'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'NetUPnP' because it creates members of the following IDisposable types: 'ManualResetEvent'. If 'NetUPnP' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CombineUrls(System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="132">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'NetUPnP.CombineUrls(string, string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteForwardingRule(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="216">Method 'NetUPnP.DeleteForwardingRule(int)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "UPnP delete forwarding rule failed: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="214">Modify 'NetUPnP.DeleteForwardingRule(int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForwardPort(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="189">Method 'NetUPnP.ForwardPort(int, string)' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "UPnP port forward failed: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="187">Modify 'NetUPnP.ForwardPort(int, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="171">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'NetUPnP.ForwardPort(int, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="171">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'NetUPnP.ForwardPort(int, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetExternalIP()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lidgren.Network.NetPeer.LogWarning(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="239">Method 'NetUPnP.GetExternalIP()' passes a literal string as parameter 'message' of a call to 'NetPeer.LogWarning(string)'. Retrieve the following string(s) from a resource table instead: "Failed to get external IP: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="237">Modify 'NetUPnP.GetExternalIP()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUPnP.cs" Line="225">Change 'NetUPnP.GetExternalIP()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetUtility" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BitsToHoldUInt(System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="uint" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="432">Consider replacing the language-specific data type identifier 'UInt' in member name 'NetUtility.BitsToHoldUInt(uint)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BytesToHoldBits(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="443">In method 'NetUtility.BytesToHoldBits(int)', correct the spelling of 'num' in parameter name 'numBits' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="numBits+7" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="444">Correct the potential overflow in the operation 'numBits+7' in 'NetUtility.BytesToHoldBits(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareElements(System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="470">'NetUtility.CompareElements(byte[], byte[])' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateSHA1Hash(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="618">Correct the casing of 'SHA' in member name 'NetUtility.CreateSHA1Hash(byte[])' by changing it to 'Sha'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateSHA1Hash(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="627">Correct the casing of 'SHA' in member name 'NetUtility.CreateSHA1Hash(byte[], int, int)' by changing it to 'Sha'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateSHA1Hash(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="609">Correct the casing of 'SHA' in member name 'NetUtility.CreateSHA1Hash(string)' by changing it to 'Sha'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetBroadcastAddress()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="342">Modify 'NetUtility.GetBroadcastAddress()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="290">Change 'NetUtility.GetBroadcastAddress()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMacAddress()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="245">Change 'NetUtility.GetMacAddress()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMyAddress(System.Net.IPAddress&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="354">Consider a design that does not require that 'mask' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLocal(System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="420">In externally visible method 'NetUtility.IsLocal(IPAddress)', validate parameter 'remote' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeCommaDelimitedList`1(System.Collections.Generic.IList`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="594">In externally visible method 'NetUtility.MakeCommaDelimitedList&lt;T&gt;(IList&lt;T&gt;)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Resolve(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ip" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="162">In method 'NetUtility.Resolve(string)', correct the spelling of 'ip' in parameter name 'ipOrHost' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Resolve(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ip" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="75">In method 'NetUtility.Resolve(string, int)', correct the spelling of 'ip' in parameter name 'ipOrHost' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResolveAsync(System.String,Lidgren.Network.NetUtility+ResolveAddressCallback)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ip" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="84">In method 'NetUtility.ResolveAsync(string, NetUtility.ResolveAddressCallback)', correct the spelling of 'ip' in parameter name 'ipOrHost' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResolveAsync(System.String,System.Int32,Lidgren.Network.NetUtility+ResolveEndPointCallback)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ip" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="57">In method 'NetUtility.ResolveAsync(string, int, NetUtility.ResolveEndPointCallback)', correct the spelling of 'ip' in parameter name 'ipOrHost' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SortMembersList(System.Reflection.MemberInfo[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Compare(System.String,System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="558">'NetUtility.SortMembersList(MemberInfo[])' passes 'StringComparison.InvariantCulture' as the 'StringComparison' parameter to 'string.Compare(string, string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SwapByteOrder(System.UInt32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="448">'NetUtility.SwapByteOrder(uint)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SwapByteOrder(System.UInt64)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="457">'NetUtility.SwapByteOrder(ulong)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToByteArray(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="483">In member 'NetUtility.ToByteArray(string)', consider replacing the data type identifier 'String' in parameter name 'hexString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="484">In externally visible method 'NetUtility.ToByteArray(string)', validate parameter 'hexString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToHexString(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network" File="NetUtility.cs" Line="266">In externally visible method 'NetUtility.ToHexString(byte[])', validate parameter 'data' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToHexString(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NetUtility.ToHexString(byte[], int, int)', validate parameter 'data' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetUtility+ResolveAddressCallback" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="adr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'NetUtility.ResolveAddressCallback', correct the spelling of 'adr' in parameter name 'adr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'NetUtility.ResolveAddressCallback'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NetUtility+ResolveEndPointCallback" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'NetUtility.ResolveEndPointCallback'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NetXorEncryption" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Decrypt(Lidgren.Network.NetIncomingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetXorEncryption.cs" Line="57">In externally visible method 'NetXorEncryption.Decrypt(NetIncomingMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(Lidgren.Network.NetOutgoingMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetXorEncryption.cs" Line="43">In externally visible method 'NetXorEncryption.Encrypt(NetOutgoingMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetXtea" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Xtea" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Xtea' in type name 'NetXtea'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Lidgren.Network.NetPeer,System.Byte[],System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetXteaEncryption.cs" Line="50">In externally visible method 'NetXtea.NetXtea(NetPeer, byte[], int)', validate parameter 'key' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetKey(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Keith\Dropbox\Keith's Crap\Bonfire\Lidgren.Network\Encryption" File="NetXteaEncryption.cs" Line="91">In member 'NetXtea.SetKey(byte[], int, int)', change parameter name 'length' to 'count' in order to match the identifier as it has been declared in 'NetEncryption.SetKey(byte[], int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SingleUIntUnion" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'SingleUIntUnion' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'SingleUIntUnion' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#SingleValue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SingleUIntUnion.SingleValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UIntValue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SingleUIntUnion.UIntValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="uint" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error">Consider replacing the language-specific data type identifier 'UInt' in member name 'SingleUIntUnion.UIntValue' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPStatus" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPStatus' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPStatus'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="XorShiftRandom" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Instance" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2015-02-28 02:28:19Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'XorShiftRandom.Instance' or change the field to one that is an immutable reference type. If the reference type 'XorShiftRandom' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 45</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182146.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="EnumStorageShouldBeInt32" Category="Microsoft.Design" CheckId="CA1028">
   <Name>Enum storage should be Int32</Name>
   <Description>There is little or no benefit to using a type smaller than Int32. You might require a type that is larger than Int32 if: 1) the enumeration values are flags and there are or will be many (&amp;amp;gt;32) values, or 2) the type needs to be different from Int32 for backward compatibility. Avoid using an underlying type that is not integral.</Description>
   <Resolution Name="NotInt32">If possible, make the underlying type of {0} System.Int32 instead of {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182147.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="DelegateParameter">In delegate {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182354.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504">
   <Name>Review misleading field names</Name>
   <Description>Review field names which, by convention, appear to indicate they are instance or static but, in fact, are not. This rule fires against instance fields which have names prefixed with "s_" and static fields which are prefixed with "m_".</Description>
   <Resolution Name="Static">The field name {0} suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb164506.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309">
   <Name>Use ordinal StringComparison</Name>
   <Description>For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture.</Description>
   <Resolution Name="StringComparison">{0} passes '{1}' as the 'StringComparison' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385972.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberParameterNoAlternate">In member {0}, replace the term '{1}' in parameter name {2} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
